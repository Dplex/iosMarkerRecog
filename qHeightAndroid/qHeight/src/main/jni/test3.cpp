/* DO NOT EDIT THIS FILE - it is machine generated */

#include <jni.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc_c.h>

#include "CornerDetection.h"
#include "MarkerRcgn.h"
#include <android/log.h>

using namespace std;
using namespace cv;
/* Header for class com_sklee_jnitest_HelloJNI */

extern "C" {

JNIEXPORT jboolean JNICALL Java_com_qoon_JNITest_test3(JNIEnv *env,
    jobject object, jint width, jint height, jbyteArray NV21FrameData,
    jintArray outPixels) {

  jbyte * pNV21FrameData = env->GetByteArrayElements(NV21FrameData, 0);
  jint * poutPixels = env->GetIntArrayElements(outPixels, 0);

  Mat Frame;
  Mat YUV(height + height / 2, width, CV_8UC1,
      (unsigned char *) pNV21FrameData);
  //Mat YUV(height, width, CV_8UC3, (unsigned char *)pNV21FrameData);
  cvtColor(YUV, Frame, CV_YUV420sp2BGR);

  //Mat mResult(height, width, CV_8UC4, (unsigned char *)poutPixels);
  Mat mMarker = imread("sdcard/test/marker.jpg");
  Mat HighVC = Frame.clone();
  Mat Img = HighVC;

  for (int i = 0; i < 3; i++)
    cv::pyrDown(Img, Img);

  CMarkerRcgn mr;
  mr.setParam(Img, mMarker);
  mr.doProc();

  CvPoint Dispoint[4];

  for (int i = 0; i < 4; i++) {

    Dispoint[i].x = mr.m_point[i].x * (HighVC.cols / Img.cols);

    Dispoint[i].y = mr.m_point[i].y * (HighVC.rows / Img.rows);

  }

  for (int i = 0; i < 4; i++) {

    poutPixels[i * 2] = Dispoint[i].x;

    poutPixels[i * 2 + 1] = Dispoint[i].y;

  }

  env->ReleaseByteArrayElements(NV21FrameData, pNV21FrameData, 0);
  env->ReleaseIntArrayElements(outPixels, poutPixels, 0);
  return true;

}
}

